!function(){"use strict";const e=["/client/client.b3497c41.js","/client/inject_styles.5607aec6.js","/client/client.d0ca8b46.js","/client/index.5c4e8b07.js","/client/groundsat.e2084ea4.js","/client/github.733a05ae.js","/client/arap.049628ff.js","/client/index.612cf1e9.js","/client/20180105_Phase4_weekly_report.44e1cf11.js","/client/20180112_Phase4_weekly_report.0829b285.js","/client/20180119_Phase4_weekly_report.631da357.js","/client/20180125_Phase4_weekly_report.2232d2b3.js","/client/20180126_Phase4_weekly_report.2d63b302.js","/client/20180202_Phase4_weekly_report.5622aaa2.js","/client/20180210_Phase4_weekly_report.c6007928.js","/client/20180216_Phase4_weekly_report.fac541d2.js","/client/20180226_Phase4_weekly_report.d38213d5.js","/client/20180302_Phase4_weekly_report.c1e77ade.js","/client/20180309_Phase4_weekly_report.595c8624.js","/client/20180409_Phase4_weekly_report.3a5e2ee5.js","/client/20180413_Phase4_weekly_report.8f27065c.js","/client/20180727_Phase4_weekly_report.83341d03.js","/client/20180806_Phase4_weekly_report.14938d99.js","/client/20181203_Phase4_weekly_report.edb5e718.js","/client/20181210_Phase4_weekly_report.0783aadf.js","/client/20200803_Phase4_weekly_report.2f479d3a.js","/client/20201001_Phase4_weekly_report.ffa0dee0.js","/client/faq.8459589a.js","/client/ttj.722b3ba0.js"].concat(["/service-worker-index.html","/ARAP_logo.png","/Groundsat_logo.png","/Phase_4_192.png","/Phase_4_512.png","/Phase_4_Logo.jpg","/background.png","/bar.png","/favicon.png","/footer.png","/global.css","/header.png","/linkrollover.png","/manifest.json","/preview.jpg","/tab.png"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1602745939642").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1602745939642"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&t.has(s.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1602745939642").then(async t=>{try{const s=await fetch(e.request);return t.put(e.request,s.clone()),s}catch(s){const n=await t.match(e.request);if(n)return n;throw s}}))))})}();
