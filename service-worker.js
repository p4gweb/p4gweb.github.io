!function(){"use strict";const e=["/client/client.504a7ead.js","/client/inject_styles.5607aec6.js","/client/client.f328899a.js","/client/index.c30e4320.js","/client/groundsat.a2d0b326.js","/client/github.3a0af4cc.js","/client/arap.357e304f.js","/client/index.b2783f06.js","/client/20180105_Phase4_weekly_report.67408f1f.js","/client/20180112_Phase4_weekly_report.788a0149.js","/client/20180119_Phase4_weekly_report.acb2171d.js","/client/20180125_Phase4_weekly_report.dbae0229.js","/client/20180126_Phase4_weekly_report.b7b827b8.js","/client/20180202_Phase4_weekly_report.a5d675d6.js","/client/20180210_Phase4_weekly_report.7f97467f.js","/client/20180216_Phase4_weekly_report.b2551290.js","/client/20180226_Phase4_weekly_report.18fe3799.js","/client/20180302_Phase4_weekly_report.da873ca6.js","/client/20180309_Phase4_weekly_report.56f57ea3.js","/client/20180409_Phase4_weekly_report.01c2023c.js","/client/20180413_Phase4_weekly_report.975521ba.js","/client/20180727_Phase4_weekly_report.cf39f7c0.js","/client/20180806_Phase4_weekly_report.2a1b03d4.js","/client/20181203_Phase4_weekly_report.3f3fb841.js","/client/20181210_Phase4_weekly_report.368cc030.js","/client/20200803_Phase4_weekly_report.99dba473.js","/client/20201001_Phase4_weekly_report.32a088c8.js","/client/faq.2cd7a792.js","/client/ttj.b8c11cf7.js"].concat(["/service-worker-index.html","/ARAP_logo.png","/Groundsat_logo.png","/Phase_4_192.png","/Phase_4_512.png","/Phase_4_Logo.jpg","/background.png","/bar.png","/favicon.png","/footer.png","/global.css","/header.png","/linkrollover.png","/manifest.json","/preview.jpg","/tab.png"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1602761673383").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1602761673383"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&t.has(s.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1602761673383").then(async t=>{try{const s=await fetch(e.request);return t.put(e.request,s.clone()),s}catch(s){const a=await t.match(e.request);if(a)return a;throw s}}))))})}();
