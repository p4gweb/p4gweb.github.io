!function(){"use strict";const e=["/client/client.002d6860.js","/client/inject_styles.5607aec6.js","/client/client.0314445b.js","/client/index.ce97bea4.js","/client/groundsat.2fc75033.js","/client/github.a25ceb5a.js","/client/arap.6090422d.js","/client/index.7fc50607.js","/client/20180105_Phase4_weekly_report.156ea9bb.js","/client/20180112_Phase4_weekly_report.a4322909.js","/client/20180119_Phase4_weekly_report.ab4e96e7.js","/client/20180125_Phase4_weekly_report.28385245.js","/client/20180126_Phase4_weekly_report.7d492664.js","/client/20180202_Phase4_weekly_report.4a7ff3a9.js","/client/20180210_Phase4_weekly_report.2f611986.js","/client/20180216_Phase4_weekly_report.9278655a.js","/client/20180226_Phase4_weekly_report.cb25ce7f.js","/client/20180302_Phase4_weekly_report.fef55ea6.js","/client/20180309_Phase4_weekly_report.5999b13d.js","/client/20180409_Phase4_weekly_report.9d2ff221.js","/client/20180413_Phase4_weekly_report.1f5c9d63.js","/client/20180727_Phase4_weekly_report.4d90d483.js","/client/20180806_Phase4_weekly_report.f1b8e7cf.js","/client/20181203_Phase4_weekly_report.4b5aeb25.js","/client/20181210_Phase4_weekly_report.154f89c3.js","/client/20200803_Phase4_weekly_report.891cb91d.js","/client/20201001_Phase4_weekly_report.2d2a0cd4.js","/client/faq.00c3a3bd.js","/client/ttj.c956681c.js"].concat(["/service-worker-index.html","/ARAP_logo.png","/Groundsat_logo.png","/Phase_4_192.png","/Phase_4_512.png","/Phase_4_Logo.jpg","/background.png","/bar.png","/favicon.png","/footer.png","/global.css","/header.png","/linkrollover.png","/manifest.json","/preview.jpg","/tab.png"]),t=new Set(e);self.addEventListener("install",t=>{t.waitUntil(caches.open("cache1602328987509").then(t=>t.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)"cache1602328987509"!==t&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&t.has(s.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1602328987509").then(async t=>{try{const s=await fetch(e.request);return t.put(e.request,s.clone()),s}catch(s){const n=await t.match(e.request);if(n)return n;throw s}}))))})}();
